#!/usr/bin/python
import requests
from webbrowser import open
import sys
import argparse
from os import environ
from subprocess import run
from random import randrange
from PIL import Image
from io import BytesIO
from pathlib import Path
from colorama import Fore, Style

history = []
term = environ.get("TERM")
factor_mult = 1.00 if "kitty" in term else 0.55
prsr = argparse.ArgumentParser()
Path.mkdir(Path("/tmp/nekoget"), exist_ok=True)
tmpdir = Path("/tmp/nekoget")
full_img_url = ""
vers_pr = """
‚†Ä‚†Ä‚†Ä‚††‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚†Ä‚††‚†Ä‚†Ä‚†Ñ‚†Ä‚¢§‚°ø‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ñ‚†Ä‚††‚†Ä‚††‚†Ä‚†Ä‚†Ñ‚†Ä‚†Ñ
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚†É‚†à‚¢É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†É‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚¢Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚£Ä‚£æ‚†è‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚£Ä‚£¥‚†ü‚†Ä‚†Ä‚°Ä‚†Ä     _   __________ ______  __________________‚†Ä
‚†Ñ‚†Ä‚†Ä‚†Ä‚††‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚°ü‚†Ä‚°Ä‚†Ä‚¢∞‚†Ä‚†Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚†Å‚†Ä‚†∞‚†Ä‚†Ä‚†Ä‚†Ä   / | / / ____/ //_/ __ \\/ ____/ ____/_  __/
‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†à‚¢Ä‚£æ‚£ø‚†á‚°î‚¢≥‚£Ä‚£∏‚£Ä‚°Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚††‚†Ä‚†Ä‚†Ä‚†Ä  /  |/ / __/ / ,< / / / / / __/ __/   / /
‚°Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ê‚£ø‚£ø‚£ø‚°º‚†Ä‚†Ä‚†Ä‚†à‚¢π‚†É‚°Ä‚†Ä‚¢Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚°Ä‚†Ä‚°Ä‚£†‚£∂‚£ø‚°ø‚†ã‚£Ä‚£†‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä / /|  / /___/ /| / /_/ / /_/ / /___  / /
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚¢ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†¶‚†§‚†§‚†§‚¢§‚£¥‚£Ü‚†Ä‚¢†‚£æ‚£ü‚£ø‚£ø‚†ó‚†â‚†∞‚†•‚†Ñ‚£†‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä/_/ |_/_____/_/ |_\\____/\\____/_____/ /_/
‚†Å‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£æ‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚†º‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†¢‚°ô‚†ª‚¢ø‚£ø‚°ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚¢è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†ø‚†ã‚°ø‚†ø‚†Ä‚†Ä‚£†‚£§‚°§‚†ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢¶‚°Ä‚†ô‚†≤‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£à‚£≥‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°º‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚°Ä‚†Ä‚†à‚†≥‚°Ñ‚†Ä‚†Ä‚¢ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°æ‚†Ä‚†Ä‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∑‚°Ä‚†Ä‚†Ä‚†ò‚¢¶‚¢§‚£º‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä    Programmed by Jer4q & ChatGPT
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ú‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†è‚£á‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚¢≥‚†Ä‚†Ä‚†Ä‚†à‚¢ß‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚¢æ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£á‚£Ä‚£π‚°Ä‚¢∞‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£º‚£®‚£á‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä    Most request things : ChatGPT
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚†é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†É‚†Ä‚†Ä‚¢∏‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†á‚†Ä‚†∏‚°Ñ‚†Ä‚†∏‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚¢Ä‚°§‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚£á‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°é‚†Ä‚†Ä‚†Ä‚¢≥‚†Ä‚†Ä‚†à‚¢ø‚£ø‚°Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä    Everything else : Jer4q
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£á‚£†‚£î‚£Å‚†§‚†î‚†í‚†â‚£∑‚†Ä‚†Ä‚†Ä‚¢†‚†è‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚¢π‚†á‚†Ä‚†Ä‚†Ä‚¢Ä‚°û‚¢Ä‚£†‚£§‚£∂‚£¨‚£á‚†Ä‚†Ä‚°º‚¢∑‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ø‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ü‚†π‚°Ü‚†Ä‚¢†‚£ø‚£æ‚¢ø‚£ø‚£ø‚£ø‚°ø‚£ø‚†Ñ‚†Ä‚†Ä‚£†‚°æ‚†°‚£ø‚£ø‚£ø‚°ç‚†ô‚£ø‚†Å‚¢Ä‚£ø‚°Ü‚†Ä‚†ô‚£Ñ‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†π‚°Ä‚£º‚°è‚†Å‚£∏‚£ø‚£ø‚¢ø‚°∑‚°á‚†Ä‚£†‚†û‚¢π‚†É‚†Ä‚°ø‚°ü‚¢ø‚†É‚†Ä‚°ü‚°Ü‚¢∏‚†Ä‚†ë‚†¢‚†§‚†º‚†Ü‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†≥‚°á‚¢≥‚†Ä‚¢ª‚£Ñ‚†Ä‚¢∞‚¢£‚°ß‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£Ä‚°º‚†Ä‚¢∞‚†á‚†π‚¢ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä    v0.4.3 | 26.9.2024
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ü‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚¢ß‚†Ä‚¢ô‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢Å‚¢†‚£æ‚°Ä‚†Ä‚¢∏‚†Ä‚†Ä‚£∂‚°ø‚£ø‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°é‚†Ä‚¢†‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚¢≤‚£Ñ‚£ø‚°å‚†¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°Ä‚£ø‚†É‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†ü‚†õ‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†û‚¢Ä‚£†‚†É‚†Ä‚†Ä‚†Ä‚°î‚¢ª‚¢∏‚°Ä‚†Ä‚†Ä‚†à‚°á‚†ô‚†ì‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†ü‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢Ä‚°¥‚†ó‚†ö‚†â‚¢∏‚†Ä‚†Ä‚†Ä‚¢†‚°á‚†Ä‚†ü‚¢£‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°û‚†â‚†Ä‚†Ä‚†Ä‚£∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°Ñ‚†Ä‚†Ä‚°∏‚†π‚°Ñ‚†Ä‚¢à‚£á‚†Ä‚†Ä‚£ß‚†Ä‚†Ä‚†ò‚¢∑‚£∂‚£§‚£Ñ‚£Ä‚£Ä‚£Ä‚°§‚†î‚†ã‚¢ß‚°ø‚°Ä‚†Ä‚†Ä‚†Ä‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢£‚†Ä‚†Ä‚°á‚†Ä‚¢ô‚£∂‚£ø‚£ø‚°Ü‚†Ä‚£ø‚¢¶‚°Ä‚†Ä‚†Ä‚¢π‚£ø‚£¶‚£Ä‚£©‚†ü‚†Ä‚†Ä‚†Ä‚†à‚†Å‚¢£‚†Ä‚†Ä‚¢∞‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†≥‚†û‚¢£‚°¥‚†ã‚†Ä‚¢ø‚£ø‚£ø‚°Ñ‚£ü‚£∂‚°ª‚£¶‚£Ä‚¢Ä‚£ø‚£ª‚£ø‚£ø‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢Ü‚¢Ä‚°æ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
"""

def parse_list(string):
    return string.split("+")

rat = prsr.add_argument_group("Maturity Flags (NekosAPI)", "This group contains parameters that control the (age) ratings of the content fetched.")
ext = prsr.add_argument_group("Extras (NekosAPI)", "This group contains parameters that control the content fetched further.")

rat.add_argument("-ms", "--minus-safe", help="remove safe filter, as it is on default, removing this and suggestive, will let all types of ratings be shown", action='store_true')
rat.add_argument("-mS", "--minus-suggestive", help="remove suggestive filter, as it is on default, removing this and safe, will let all types of ratings be shown", action='store_true')
rat.add_argument("-pb", "--plus-borderline", help="add borderline filter to allowed ratings", action='store_true')
rat.add_argument("-pe", "--plus-explicit", help="add explicit filter to allowed ratings", action='store_true')

ext.add_argument("-c", "--character", help="character ID to look for", type=int)
ext.add_argument("-f", "--is-flagged", help="whether the fetched content is flagged by mods of NekosAPI (0 or 1)", type=int)
ext.add_argument("-o", "--is-original", help="(USELESS) whether the image's idea is original or it uses characters/settings/content from another place (not original) (0 or 1)", type=int)
ext.add_argument("-t", "--tag", help="tag ID to look for", type=int)
ext.add_argument("-a", "--artist", help="artist ID to look for", type=int)
ext.add_argument("-ss", "--is-screenshot", help="(USELESS) whether the image is a screenshot of an anime ep./manga page (0 or 1)", type=int)

yrat = prsr.add_argument_group("Maturity Flags (yande.re)", "This group contains parameters that control the maturity rating of the content fetched from yande.re. If nothing is specified, only SAFE will be shown.")

yrat.add_argument("-yu", "--yand-unspecify", help="show all maturity levels", action='store_true')
yrat.add_argument("-yq", "--yand-questionable", help="use the QUESTIONABLE flag for content fetched", action='store_true')
yrat.add_argument("-ye", "--yand-explicit", help="use the EXPLICIT flag for content fetched", action='store_true')

yext = prsr.add_argument_group("Extras (yande.re)", "This group contains parameters that control the content fetched from yande.re further.")

yext.add_argument("-p", "--page", help="the page number to look for, can be useful for variety as yande.re only picks a random out of 1000 images max", type=int)
yext.add_argument("-yt", "--yand-tags", help="tag names to look for (format: tag1+tag2+tag3)", type=parse_list)
yext.add_argument("-ync", "--yand-no-catgirl", help="when enabled, doesn't automatically add the 'catgirl' tag", action='store_true')

funargs = prsr.add_argument_group("Fun", "This group contains arguments for fun stuff.")

funargs.add_argument("-T", "--terminal", help="show images in terminal instead of browser or local (may not work on all terminals, but should on most, but kitty will have the best quality)", action='store_true')

prsr.add_argument("-dp", "--download-path", help="specify a custom download path, default is ~/Downloads", type=Path)
prsr.add_argument("-ds", "--download-sample", help="instead of downloading the huge original file, download the smaller sample instead", action='store_true')
prsr.add_argument("-dnf", "--disable-nerdfonts", help="use text instead of NF icons", action='store_true')
prsr.add_argument("--verbose", help="extra verbosity", action='store_true')
prsr.add_argument("--print-data", help="also prints the metadata page of the image", action='store_true')
prsr.add_argument("-v", "--version", help="display ASCII art and some info", action='store_true')
prsr.add_argument("-y", "--yande-re", help="use yande.re API instead of NekosAPI", action='store_true')
prsr.add_argument("-br", "--browser", help="open image in browser, instead of locally (risky, as it will save it into browser history)", action='store_true')
args = prsr.parse_args()
yand = args.yande_re
factor_mult = 1.0 if not args.terminal else factor_mult

if args.version:
    print(vers_pr)
    sys.exit()

ratings = ["suggestive", "safe"]

if args.minus_safe:
    ratings.remove("safe")
if args.minus_suggestive:
    ratings.remove("suggestive")
if args.plus_borderline:
    ratings.append("borderline")
if args.plus_explicit:
    ratings.append("explicit")

def copy(text):
    symb = "ÔÉÅ " if not args.disable_nerdfonts else "üîó"
    if environ.get("XDG_SESSION_TYPE") == "x11":
        if Path("/usr/bin/xclip").exists():
            run(["xclip", text], text=True)
            print(f"{symb} copied!")
        else:
            print(f"{Style.BRIGHT}{Fore.RED}error{Style.RESET_ALL}{Fore.RESET}: did not copy, because xclip wasn't found, do you have it installed?")
    elif environ.get("XDG_SESSION_TYPE") == "wayland":
        if Path("/usr/bin/wl-copy").exists():
            run(["wl-copy", text], text=True)
            print(f"{symb} copied!")
        else:
            print(f"{Style.BRIGHT}{Fore.RED}error{Style.RESET_ALL}{Fore.RESET}: did not copy, because wl-copy wasn't found, do you have it installed?")
    else:
        print(f"{Style.BRIGHT}{Fore.RED}error{Style.RESET_ALL}{Fore.RESET}: could not detect session type, can not copy link.")

if args.download_path and not Path.is_dir(args.download_path):
    print("t")
    prsr.error("invalid path for -dp")
if not args.download_path:
    args.download_path = str(run(["xdg-user-dir", "DOWNLOAD"], capture_output=True, text=True).stdout.strip())

if not yand:
    url = "https://api.nekosapi.com/v3/images/random"
else:
    url = "https://yande.re/post.json"

params = {
    "limit" : 1,
    "rating" : ratings,
    "character" : args.character,
    "tag" : args.tag,
    "is_screenshot" : args.is_screenshot,
    "artist" : args.artist,
    "is_flagged" : None,
    "is_original" : None
}

if not args.yand_no_catgirl:
    ytags = ["nekomimi"]
else:
    ytags = []

if args.yand_tags:
    for tag in args.yand_tags:
        ytags.append(tag)

if sum([args.yand_unspecify, args.yand_questionable, args.yand_explicit]) > 1:
    prsr.error("select one out of -yu, -yq or -ye")

if not args.yand_unspecify:
    ytags.append("rating:safe")
if args.yand_questionable:
    ytags.append("rating:questionable")
if args.yand_explicit:
    ytags.append("rating:explicit")

yand_params = {
    "limit" : 1000,
    "tags" : " ".join(ytags),
    "page" : 0
}

yand_params["page"] = args.page


if args.is_flagged:
    params['is_flagged'] = args.is_flagged

if args.is_original:
    params['is_original'] = args.is_original


def get_img(image_url, scale_factor=1.0):
    img_res = requests.get(image_url)
    img_res.raise_for_status()
    if img_res.status_code == 200:
        img = Image.open(BytesIO(img_res.content))
        img = img.resize((int(img.width * scale_factor), int(img.height * scale_factor)))
        img_path = tmpdir / Path("nekores.png")
        img.save(img_path)
        return img, img_path
    else:
        return 1, img_res.status_code

def glob_open(image_url, scale_factor=1.0):
    if args.browser:
        open(image_url)
    elif args.terminal:
        img_attr = get_img(image_url, scale_factor)
        if img_attr[0] == 1:
            print(f"{Style.BRIGHT}{Fore.RED}error{Style.RESET_ALL}{Fore.RESET}: failed to get image with status {img_attr[1]}")
        else:
            if "kitty" in term:
                run(["kitten", "icat", "--align", "left", img_attr[1]])
            else:
                run(["img2sixel", img_attr[1]])
    else:
        img_attr = get_img(image_url, scale_factor)
        if img_attr[0] == 1:
            print(f"{Style.BRIGHT}{Fore.RED}error{Style.RESET_ALL}{Fore.RESET}: failed to get image with status {img_attr[1]}")
        else:
            img_attr[0].show()

def get_neko():
    global image_url
    global image_src
    global full_img_url
    if args.verbose:
        print(f"requesting '{url}' with params: {params}")
    res = requests.get(url, params=params)
    res.raise_for_status()

    json_data = res.json()

    if json_data.get("items"):

        image_url = json_data["items"][0].get("sample_url")
        full_img_url = json_data["items"][0].get("image_url") if not args.download_sample else image_url
        image_id = json_data["items"][0].get("id")
        if image_url:
            print(f"‚ùÆ Image ID : {image_id} ‚ùØ")
            glob_open(image_url)
            if args.print_data:
                print(json_data)
        else:
            print("no image URL found.")

        rating = json_data["items"][0].get("rating")
        if rating:
            rating_text = "Û∞™ä" if not args.disable_nerdfonts else "Rating"
            print(f"{rating_text} : {rating}")

        image_src = json_data["items"][0].get("source")
        if image_src:
            src_text = "Ó©®" if not args.disable_nerdfonts else "Source"
            print(f"{src_text} : {image_src}")
        else:
            print("no source link found.")
        embed_text = "Óôá" if not args.disable_nerdfonts else "Embed"
        print(f"{embed_text} : {image_url}")

        artist_data = json_data["items"][0].get("artist")
        if artist_data:
            artist_name = artist_data.get("name")
            artist_id = artist_data.get("id")
            artist_text = "Ôáº" if not args.disable_nerdfonts else "Artist"
            print(f"{artist_text} : {artist_name} (ID: {artist_id})")
        else:
            print("no artist data found.")
    else:
        print("no items found in the response; likely no results for your parameters.")
        sys.exit()

count = 0
def yand_neko():
    global image_url
    global image_src
    global count
    global full_img_url
    if args.verbose:
        print(f"requesting '{url}' with params: {yand_params}")
    res = requests.get(url, params=yand_params)
    res.raise_for_status()

    json_data = res.json()
    
    count = -1
    for i in json_data:
        count += 1
    
    if count <= 0:
        print("no items found in the response; likely no results for your parameters.")
        sys.exit()

    picked = randrange(0,count)
    image_url = json_data[picked].get("sample_url")
    full_img_url = json_data[picked].get("file_url") if not args.download_sample else image_url
    image_id = json_data[picked].get("id")
    if image_url:
        print(f"‚ùÆ Image ID : {image_id} ‚ùØ")
        scale_factor = 0.5 if args.terminal else 1.0
        glob_open(image_url, scale_factor * factor_mult)

        if args.print_data:
            print(json_data)
    else:
        print("no image URL found.")
    
    tags = json_data[picked].get("tags")
    if tags:
        tags_text = f"{Fore.BLUE}Û∞ìπ{Fore.RESET}" if not args.disable_nerdfonts else "Tags"
        print(f"{tags_text} : {tags}")

    score = json_data[picked].get("score")
    if score:
        score_text = f"{Fore.YELLOW}ÔÄÖ{Fore.RESET}" if not args.disable_nerdfonts else "Score"
        print(f"{score_text} : {score}")

    rating = json_data[picked].get("rating")
    if rating:
        rating = "safe" if rating == "s" else rating
        rating = "questionable" if rating == "q" else rating
        rating = "explicit" if rating == "e" else rating
        rating_text = f"{Fore.GREEN}Û∞™ä{Fore.RESET}" if not args.disable_nerdfonts else "Rating"
        print(f"{rating_text} : {rating}")

    image_src = json_data[picked].get("source")
    if image_src:
        src_text = f"{Fore.MAGENTA}Ó©®{Fore.RESET}" if not args.disable_nerdfonts else "Source"
        print(f"{src_text} : {image_src}")
    else:
        print("no source link found.")
    embed_text = f"{Fore.BLUE}Óôá{Fore.RESET}" if not args.disable_nerdfonts else "Embed"
    print(f"{embed_text} : {image_url}")
    author = json_data[picked].get("author")
    if author:
        author_text = "ÔäΩ" if not args.disable_nerdfonts else "Author"
        print(f"{author_text} : {author}")

if not yand:
    get_neko()
else:
    yand_neko()
    print(f"{count} results found.")

class NkgShell:
    def __init__(self):
        self.cmds = {
            "help" : self.help,
            "h" : self.help,
            "next" : self.next,
            "" : self.next,
            "download" : self.download,
            "d" : self.download,
            "copy" : self.scopy,
            "c" : self.scopy,
            "q" : self.quit,
            "quit" : self.quit,
            "history" : self.history
        }
        #self.ind = 0 if not args.disable_nerdfonts else 1
        self.sym = {
            "prompt" : "‚ùØ"
        }
        self.prompt_active = True 
    
    def help(self):
        print(f"""
{Style.BRIGHT}NekoGet Shell{Style.RESET_ALL} Help

    :: 'h' or 'help' : print this screen
    :: empty or 'next' : go to next image
    :: 'd' or 'download' : download current image
    :: 'c' or 'copy' : copy embed link of current image
    :: 'q' or 'quit' : quit nekoget
    :: 'history' : show urls of the 10 past images
        """)

    def next(self):
        history.append(full_img_url)
        if not yand:
            get_neko()
        else:
            yand_neko()

    def download(self):
        run(["wget", "-P", args.download_path, full_img_url], text=True)
    
    def scopy(self):
        copy(full_img_url)

    def quit(self):
        sys.exit()
    
    def history(self):
        for i in range(min(len(list(reversed(history))), 10)):
            print(f"{len(history)-i}. {history[i]}")

    def prompt(self):
        while self.prompt_active:
            inp = input(f"{Style.BRIGHT}NkG{Style.RESET_ALL} {Fore.BLUE}{self.sym["prompt"]}{Fore.RESET} ").strip()
            if inp in self.cmds:
                self.cmds[inp]()

sh_inst = NkgShell()
print("\ntype 'h' or 'help' for a list of commands")
try:
    sh_inst.prompt()
except KeyboardInterrupt:
    print("\ninterrupted")
    sys.exit()
