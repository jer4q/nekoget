#!/usr/bin/python
import requests
from webbrowser import open
import sys
import argparse
import pyperclip
from os import system
from random import randrange
from PIL import Image
from io import BytesIO

vers_pr = """
⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠠⠀⠠⠀⠀⠄⠀⢤⡿⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠠⠀⠠⠀⠀⠄⠀⠄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠃⠈⢃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠃⠀⠀⠀
⠀⠀⠀⢀⠀⠀⠀⠀⡀⠀⢀⠀⢀⠀⠀⣀⣾⠏⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⣴⠟⠀⠀⡀⠀     _   __________ ______  __________________⠀
⠄⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡟⠀⡀⠀⢰⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⣠⣾⣿⠁⠀⠰⠀⠀⠀⠀   / | / / ____/ //_/ __ \\/ ____/ ____/_  __/
⠀⠀⠀⠈⠀⠀⠀⠀⠁⠀⠀⠀⠈⢀⣾⣿⠇⡔⢳⣀⣸⣀⡀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠋⠀⠀⠀⠠⠀⠀⠀⠀  /  |/ / __/ / ,< / / / / / __/ __/   / /
⡀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⢐⣿⣿⣿⡼⠀⠀⠀⠈⢹⠃⡀⠀⢀⠀⢀⠀⠀⡀⠀⡀⣠⣶⣿⡿⠋⣀⣠⠀⠀⠀⠀⠀⠀⠀⠀ / /|  / /___/ /| / /_/ / /_/ / /___  / /
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⢿⡏⠀⠀⠀⠀⠀⠀⠙⠦⠤⠤⠤⢤⣴⣆⠀⢠⣾⣟⣿⣿⠗⠉⠰⠥⠄⣠⠀⠀⠀⠀⠀⠀/_/ |_/_____/_/ |_\\____/\\____/_____/ /_/
⠁⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⣸⣿⣿⣾⠇⠀⠀⠀⠀⠀⣤⠼⠃⠀⠀⠀⠀⠉⠢⡙⠻⢿⣿⡿⠃⠀⠀⠀⠀⠛⢏⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠿⠋⡿⠿⠀⠀⣠⣤⡤⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠈⢦⡀⠙⠲⣄⠀⠀⠀⠀⠀⣈⣳⠆⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⡼⠋⠀⠀⠀⠀⠀⢀⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⡀⠀⠈⠳⡄⠀⠀⢿⠃⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢠⠟⠀⠀⠀⠀⠀⠀⢀⠎⠀⠀⠀⠀⠀⠀⢠⡾⠀⠀⡆⠀⠀⠀⠀⠀⣷⡀⠀⠀⠘⢦⢤⣼⡆⠀⠀⠀⠀⠀⠀    Programmed by Jer4q & ChatGPT
⠀⠀⠀⠀⠀⠀⢠⠏⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀⠀⠀⠀⢠⠏⣇⠀⠀⡄⠀⠀⠀⠀⠀⢹⢳⠀⠀⠀⠈⢧⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⡞⠀⠀⠀⠀⠀⠀⢀⢾⠁⠀⠀⠀⠀⠀⣰⣇⣀⣹⡀⢰⠁⠀⠀⠀⠀⣀⣼⣨⣇⠀⠀⠀⣸⣿⣀⠀⠀⠀⠀⠀⠀    Most request things : ChatGPT
⠀⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⢀⡴⠋⠎⠀⠀⠀⠀⠀⢠⠃⠀⠀⢸⠀⢸⠀⠀⠀⠀⠀⢠⠇⠀⠸⡄⠀⠸⣿⣿⣿⡆⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢸⡇⠀⠀⢀⡤⠊⠀⠀⠀⠀⠀⠀⠀⢠⠇⠀⠀⠀⠀⣇⡆⠀⠀⠀⠀⢀⡎⠀⠀⠀⢳⠀⠀⠈⢿⣿⡁⠀⠀⠀⠀⠀    Everything else : Jer4q
⠀⠀⠀⠀⠀⠈⣇⣠⣔⣁⠤⠔⠒⠉⣷⠀⠀⠀⢠⠏⣀⣀⣀⣀⡀⢹⠇⠀⠀⠀⢀⡞⢀⣠⣤⣶⣬⣇⠀⠀⡼⢷⣷⡀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢯⠉⠁⠀⠀⠀⠀⠆⠹⡆⠀⢠⣿⣾⢿⣿⣿⣿⡿⣿⠄⠀⠀⣠⡾⠡⣿⣿⣿⡍⠙⣿⠁⢀⣿⡆⠀⠙⣄⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀⢸⠀⠀⠹⡀⣼⡏⠁⣸⣿⣿⢿⡷⡇⠀⣠⠞⢹⠃⠀⡿⡟⢿⠃⠀⡟⡆⢸⠀⠑⠢⠤⠼⠆⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣧⠀⠀⠀⠀⢸⠀⠀⠀⠳⡇⢳⠀⢻⣄⠀⢰⢣⡧⠞⠀⠀⠀⠀⠀⢿⣀⡼⠀⢰⠇⠹⢻⠀⠀⠀⠀⠀⠀⠀⠀    v0.4.0 | 24.9.2024
⠀⠀⠀⠀⠀⠀⢰⠛⠀⠀⠀⠀⢸⡆⠀⠀⠀⠉⠀⢧⠀⢙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⢁⢠⣾⡀⠀⢸⠀⠀⣶⡿⣿⠀⠀⠀
⠀⠀⠀⠀⠀⢀⡎⠀⢠⠀⠀⠀⠀⡇⠀⠀⠀⠀⢲⣄⣿⡌⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡀⣿⠃⠀⢸⠀⠀⢸⠟⠛⠀⠀⠀
⠀⠀⠀⠀⢀⠞⢀⣠⠃⠀⠀⠀⡔⢻⢸⡀⠀⠀⠈⡇⠙⠓⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⣠⠟⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢀⡴⠗⠚⠉⢸⠀⠀⠀⢠⡇⠀⠟⢣⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡞⠉⠀⠀⠀⣸⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⠀⡸⠹⡄⠀⢈⣇⠀⠀⣧⠀⠀⠘⢷⣶⣤⣄⣀⣀⣀⡤⠔⠋⢧⡿⡀⠀⠀⠀⡟⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢣⠀⠀⡇⠀⢙⣶⣿⣿⡆⠀⣿⢦⡀⠀⠀⢹⣿⣦⣀⣩⠟⠀⠀⠀⠈⠁⢣⠀⠀⢰⡇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠳⠞⢣⡴⠋⠀⢿⣿⣿⡄⣟⣶⡻⣦⣀⢀⣿⣻⣿⣿⣄⡀⠀⠀⠀⠀⠈⢆⢀⡾⠀⠀⠀⠀⠀⠀⠀⠀⠀
"""

def parse_list(string):
    return string.split("+")

prsr = argparse.ArgumentParser()

rat = prsr.add_argument_group("Maturity Flags (NekosAPI)", "This group contains parameters that control the (age) ratings of the content fetched.")
ext = prsr.add_argument_group("Extras (NekosAPI)", "This group contains parameters that control the content fetched further.")

rat.add_argument("-ms", "--minus-safe", help="remove safe filter, as it is on default, removing this and suggestive, will let all types of ratings be shown", action='store_true')
rat.add_argument("-mS", "--minus-suggestive", help="remove suggestive filter, as it is on default, removing this and safe, will let all types of ratings be shown", action='store_true')
rat.add_argument("-pb", "--plus-borderline", help="add borderline filter to allowed ratings", action='store_true')
rat.add_argument("-pe", "--plus-explicit", help="add explicit filter to allowed ratings", action='store_true')

#rat.add_argument("-s", "--safe", help="only display safe images (non-suggestive)", action='store_true')
#rat.add_argument("-d", "--disallow-safe", help="do NOT display safe images", action='store_true')
#rat.add_argument("-S", "--suggestive", help="only display suggestive images", action='store_true')
#rat.add_argument("-H", "--horny", help="also display 'borderline' images", action='store_true')
#rat.add_argument("-b", "--borderline", help="only display 'borderline' images", action='store_true')
#rat.add_argument("-N", "--NSFW", help="also display 'explicit' and 'borderline' images", action='store_true')
#rat.add_argument("-F", "--FREAKY", help="only display 'explicit' and 'borderline' images", action='store_true')
#rat.add_argument("--literallysohorny", help="display only 'explicit'", action='store_true')

ext.add_argument("-c", "--character", help="character ID to look for", type=int)
ext.add_argument("-f", "--is-flagged", help="whether the fetched content is flagged by mods of NekosAPI (0 or 1)", type=int)
ext.add_argument("-o", "--is-original", help="(USELESS) whether the image's idea is original or it uses characters/settings/content from another place (not original) (0 or 1)", type=int)
ext.add_argument("-t", "--tag", help="tag ID to look for", type=int)
ext.add_argument("-a", "--artist", help="artist ID to look for", type=int)
ext.add_argument("-ss", "--is-screenshot", help="(USELESS) whether the image is a screenshot of an anime ep./manga page (0 or 1)", type=int)

yrat = prsr.add_argument_group("Maturity Flags (yande.re)", "This group contains parameters that control the maturity rating of the content fetched from yande.re. If nothing is specified, only SAFE will be shown.")

yrat.add_argument("-yu", "--yand-unspecify", help="show all maturity levels", action='store_true')
yrat.add_argument("-yq", "--yand-questionable", help="use the QUESTIONABLE flag for content fetched", action='store_true')
yrat.add_argument("-ye", "--yand-explicit", help="use the EXPLICIT flag for content fetched", action='store_true')

yext = prsr.add_argument_group("Extras (yande.re)", "This group contains parameters that control the content fetched from yande.re further.")

yext.add_argument("-p", "--page", help="the page number to look for, can be useful for variety as yande.re only picks a random out of 1000 images max", type=int)
yext.add_argument("-yt", "--yand-tags", help="tag names to look for (format: tag1+tag2+tag3)", type=parse_list)
yext.add_argument("-ync", "--yand-no-catgirl", help="when enabled, doesn't automatically add the 'catgirl' tag", action='store_true')

funargs = prsr.add_argument_group("Fun", "This group contains arguments for fun stuff.")

funargs.add_argument("-T", "--terminal", help="show images in terminal instead of browser or local (may not work on all terminals, but should on most, but kitty will have the best quality)", action='store_true')

prsr.add_argument("-ds", "--download-sample", help="instead of downloading the huge original file, download th smaller sample instead", action='store_true')
prsr.add_argument("-dnf", "--disable-nerdfonts", help="use text instead of NF icons", action='store_true')
prsr.add_argument("--verbose", help="extra verbosity", action='store_true')
prsr.add_argument("--print-data", help="also prints the metadata page of the image", action='store_true')
prsr.add_argument("-v", "--version", help="display ASCII art and some info", action='store_true')
prsr.add_argument("-y", "--yande-re", help="use yande.re API instead of NekosAPI", action='store_true')
prsr.add_argument("-br", "--browser", help="open image in browser, instead of locally (risky, as it will save it into browser history)", action='store_true')
# prsr.add_argument("-c", "--copy", help="copy the url to clipboard", action='store_true')
# prsr.add_argument("-d", "--download", help="download the image", action='store_true')
args = prsr.parse_args()

yand = args.yande_re

if args.version:
    print(vers_pr)
    sys.exit()

# Send the request to the API
if not yand:
    url = "https://api.nekosapi.com/v3/images/random"
else:
    url = "https://yande.re/post.json"

ratings = ["suggestive", "safe"]

if args.minus_safe:
    ratings.remove("safe")
if args.minus_suggestive:
    ratings.remove("suggestive")
if args.plus_borderline:
    ratings.append("borderline")
if args.plus_explicit:
    ratings.append("explicit")

params = {
    "limit" : 1,
    "rating" : ratings,
    "character" : args.character,
    "tag" : args.tag,
    "is_screenshot" : args.is_screenshot,
    "artist" : args.artist,
    "is_flagged" : None,
    "is_original" : None
}

if not args.yand_no_catgirl:
    ytags = ["nekomimi"]
else:
    ytags = []

if args.yand_tags:
    for tag in args.yand_tags:
        ytags.append(tag)

if sum([args.yand_unspecify, args.yand_questionable, args.yand_explicit]) > 1:
    print("ERROR: Please select ONE.")
    prsr.print_help()
    sys.exit()


if not args.yand_unspecify:
    ytags.append("rating:safe")
if args.yand_questionable:
    ytags.append("rating:questionable")
if args.yand_explicit:
    ytags.append("rating:explicit")

yand_params = {
    "limit" : 1000,
    "tags" : " ".join(ytags),
    "page" : 0
}

yand_params["page"] = args.page

"""
in_kitty = False

if "kitty" in environ.get("TERM", "") and args.terminal:
    print("Kitty detected, using 'kitten icat' to view image.")
    in_kitty = True
elif args.terminal:
    print("Using 'w3m' to view image.")
#print(environ.get("TERM", ""))
    #print("on kitty")
"""

#yand_params["tags"].append("neko")
#print(yand_params)

if args.is_flagged:
    params['is_flagged'] = args.is_flagged

if args.is_original:
    params['is_original'] = args.is_original

def glob_open(image_url):
    if args.browser:
        open(image_url)
    elif args.terminal:
        img_res = requests.get(image_url)
        img_res.raise_for_status()
        img = None
        if img_res.status_code == 200:
            img = Image.open(BytesIO(img_res.content))
            img.save("/tmp/tmpimg.png")
        else:
            print("Failed to get image.")
        if img:
            system(f"/usr/share/nekoget/iv-cli /tmp/tmpimg.png")
    else:
        img_res = requests.get(image_url)
        img_res.raise_for_status()
        if img_res.status_code == 200:
            img = Image.open(BytesIO(img_res.content))
            img.show()
        else:
            print("Failed to get image.")

full_img_url = ""

def get_neko():
    global image_url
    global image_src
    global full_img_url
    if args.verbose:
        print(f"requesting '{url}' with params: {params}")
    res = requests.get(url, params=params)
    res.raise_for_status()

    # Parse the JSON response
    json_data = res.json()

        # Extract the image URL from the first item in the 'items' array
    if json_data.get("items"):

        image_url = json_data["items"][0].get("sample_url")
        full_img_url = json_data["items"][0].get("image_url") if not args.download_sample else image_url
        image_id = json_data["items"][0].get("id")
        if image_url:
            print(f"Image ID : {image_id}")
            glob_open(image_url)
            """
            if args.browser:
                open(image_url)
            else:
                img_res = requests.get(image_url)    
                if img_res.status_code == 200:
                    img = Image.open(BytesIO(img_res.content))
                    img.show()
                else:
                    print("Failed to get image.")
"""
            if args.print_data:
                print(json_data)
        else:
            print("No image URL found.")

        rating = json_data["items"][0].get("rating")
        if rating:
            rating_text = "󰪊" if not args.disable_nerdfonts else "Rating"
            print(f"{rating_text} : {rating}")

        image_src = json_data["items"][0].get("source")
        if image_src:
            src_text = "" if not args.disable_nerdfonts else "Source"
            print(f"{src_text} : {image_src}")
        else:
            print("No source link found.")
        embed_text = "" if not args.disable_nerdfonts else "Embed"
        print(f"{embed_text} : {image_url}")

        artist_data = json_data["items"][0].get("artist")
        if artist_data:
            artist_name = artist_data.get("name")
            artist_id = artist_data.get("id")
            artist_text = "" if not args.disable_nerdfonts else "Artist"
            print(f"{artist_text} : {artist_name} (ID: {artist_id})")
        else:
            print("No artist data found.")
    else:
        print("No items found in the response; likely no results for your parameters.")
        sys.exit()

count = 0
def yand_neko():
    global image_url
    global image_src
    global count
    global full_img_url
    if args.verbose:
        print(f"requesting '{url}' with params: {yand_params}")
    res = requests.get(url, params=yand_params)
    res.raise_for_status()

    # Parse the JSON response
    json_data = res.json()
    
    count = -1
    for i in json_data:
        count += 1
   
    picked = randrange(0,count)
        # Extract the image URL from the first item in the 'items' array
    image_url = json_data[picked].get("sample_url")
    full_img_url = json_data[picked].get("file_url") if not args.download_sample else image_url
    image_id = json_data[picked].get("id")
    if image_url:
        print(f"Image ID : {image_id}")
        glob_open(image_url)
#        if args.browser:
#            open(image_url)
        #else:
            #img_res = requests.get(image_url)
            #if img_res.status_code == 200:
            #    img = Image.open(BytesIO(img_res.content))
            #    img.show()
            #else:
            #    print("Failed to get image.")

        if args.print_data:
            print(json_data)
    else:
        print("No image URL found.")
    
    tags = json_data[picked].get("tags")
    if tags:
        tags_text = "󰓹" if not args.disable_nerdfonts else "Tags"
        print(f"{tags_text} : {tags}")

    score = json_data[picked].get("score")
    if score:
        score_text = "" if not args.disable_nerdfonts else "Score"
        print(f"{score_text} : {score}")

    rating = json_data[picked].get("rating")
    if rating:
        rating = "safe" if rating == "s" else rating
        rating = "questionable" if rating == "q" else rating
        rating = "explicit" if rating == "e" else rating
        rating_text = "󰪊" if not args.disable_nerdfonts else "Rating"
        print(f"{rating_text} : {rating}")

    image_src = json_data[picked].get("source")
    if image_src:
        src_text = "" if not args.disable_nerdfonts else "Source"
        print(f"{src_text} : {image_src}")
    else:
        print("No source link found.")
    embed_text = "" if not args.disable_nerdfonts else "Embed"
    print(f"{embed_text} : {image_url}")
    author = json_data[picked].get("author")
    if author:
        author_text = "" if not args.disable_nerdfonts else "Author"
        print(f"{author_text} : {author}")
    #else:
    #    print("No items found in the response; likely no results for your parameters.")
    #    sys.exit()

if not yand:
    get_neko()
else:
    yand_neko()
    print(f"{count} results found.")

while True:
    nextq = input("Press Enter to get another, or type 'c'/'copy' or 'd'/'download': ")
    nextq = nextq.strip().lower()
    #nextq = nextq.strip()
    if args.verbose:
        print(f"nextq = {nextq}")
    if nextq == "":
        print("\nNext..\n")
        if not yand:
            get_neko()
        else:
            yand_neko()
    elif nextq == "c" or nextq == "copy":
        print("Copied!")
        pyperclip.copy(full_img_url)
    elif nextq == "d" or nextq == "download":
        system(f"wget -P $(xdg-user-dir DOWNLOAD) {full_img_url}")
    else:
        print("Something else was written, exiting...")
        sys.exit()
